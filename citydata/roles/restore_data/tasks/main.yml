---
# Assumes push.yml has been run to copy the backup database to the target server

# Not needed? As uploaded is already in the mapped drive after pull.yml
# - name: Restore django uploaded files
#   command: docker cp {{ project_dir }}/uploaded django4{{ project_name }}:/uploaded
#   args:
#     chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'

# Not need because all of geoserver-data already in place after pull.yml
# - name: Restore the workspaces and styles of the geoserver data directory
#   command: docker cp {{ gsdata }}/{{ item }} geoserver4{{ project_name }}:/geoserver_data/data/{{ item }}
#   with_items:
#     - styles
#     - workspaces
#     # Not done coz no geoserver-data/data subdir:
#     # docker cp geodatadir/data/. spcgeonode_geoserver_1:/spcgeonode-geodatadir/data
#     # - data

# - name: Create the postgres database if previously dropped
#   command: docker exec -i db4{{ project_name }} createdb -U postgres postgres
#   ignore_errors: True
#
- name: Restore database
  shell:  cat '{{ backup_dir }}/pg_dumpall_{{ data_src }}.sql' | docker exec -i db4{{ project_name }} psql -U postgres
  ignore_errors: True
  no_log: True

# - name: Drop the postgres database
#   command: docker exec -i db4{{ project_name }} dropdb -U postgres postgres
#   ignore_errors: True
#
# # Next two tasks from https://stackoverflow.com/questions/5108876/kill-a-postgresql-session-connection/5109190#5109190
# - name: Prevent further connections to geonode
#   command: docker exec -i db4{{ project_name }} psql -d template1 -U postgres -c "REVOKE CONNECT ON DATABASE geonode FROM PUBLIC, postgres;"
# #
# - name: Terminate current connections to geonode
#   command: docker exec -i db4{{ project_name }} psql -d template1 -U postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname = 'geonode';"
#
# # Commented: giving error "There are 9 other sessions using the database."
# - name: Rename geonode database to postgres
#   command: docker exec -i db4{{ project_name }} psql -d template1 -U postgres -c "ALTER DATABASE geonode RENAME TO postgres;"
#
# - name: Allow further connections to postgres
#   command: docker exec -i db4{{ project_name }} psql -d template1 -U postgres -c "GRANT CONNECT ON DATABASE postgres TO PUBLIC, postgres;"
#
# #  Skip this because layers_layer doesn't have a "service_id" column, only "remote_service_id"
# # - name: Fix inconsistency that prevents migrations
# #   command: docker exec -i db4{{ project_name }} psql -U postgres -c "ALTER TABLE public.layers_layer DROP COLUMN service_id;"
# #   ignore_errors: True
#   # no_log: True
#
# - name: Migrate with fake initial
#   command: docker-compose -f docker-compose.yml run --rm --entrypoint "" django python manage.py migrate --fake-initial
#   args:
#     chdir: '{{ ansible_env.HOME }}/geonode'
#     # chdir: '{{ ansible_env.HOME }}/{{ project_dir }}'
#
# - name: Create the SQL diff to fix the schema
#   # TODO : upstream some changes to django-extensions for this to work directly
#   command: docker-compose -f docker-compose.yml run --rm --entrypoint "" django /bin/sh -c "DJANGO_COLORS=nocolor python manage.py sqldiff -ae" > fix.sql
#   args:
#     chdir: '{{ ansible_env.HOME }}/geonode'
